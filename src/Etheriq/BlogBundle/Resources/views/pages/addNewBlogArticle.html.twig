{% extends 'EtheriqBlogBundle::base.html.twig' %}

    {% block title %}
        New Article
    {% endblock title %}

     {% block wraper %}

         {% block breadcrumb %}

             {{ wo_render_breadcrumbs() }}

         {% endblock breadcrumb %}


         {{ form_start(form, {'attr': {'role': 'form', 'novalidate': 'novalidate' }}) }}

         {{ form_label(form.title, 'blog_title'|trans|raw) }}
         {{ form_widget(form.title, { 'attr': {'class': 'form-control width80', 'placeholder': 'Введите название статьи' } }) }}
         <br>
         {{ form_label(form.tags, 'Blog tags'|trans|raw) }}
         {{ form_widget(form.tags, { 'attr': {'class': 'width80'} }) }}
         {{ form_widget(form.rating, {'attr': {'value': 0 } }) }}
         <br>
         <span><strong>{{ 'add_new_tags'|trans }}</strong> </span> <img src="{{ asset('img/blog/plus.png') }}" alt="plus"  id="show-input-tags"/>
         <div class="hidden-category" id="input-tags">
             {{ form_label(form.newTags, 'new_tag_name'|trans|raw) }}
             {{ form_widget(form.newTags, { 'attr': {'class': 'form-control width80', 'placeholder': 'Введите новые теги через запятую'} }) }}
         </div>

         <br><br>
         {{ form_label(form.textBlog, 'text_article'|trans|raw) }}
         {{ form_widget(form.textBlog, { 'attr': {'class': 'form-control width80 height350', 'placeholder': 'Введите сообщение, минимальная длина 50 символом ' } }) }}

         <br>

         <p><strong>{{ 'category_article'|trans }}</strong></p>
         {{ form_widget(form.category, { 'attr': {'class': 'form-control', 'style': 'width:80%;'} }) }}

         <br>
         <span><strong>{{ 'add_new_category'|trans }}</strong> </span> <img src="{{ asset('img/blog/plus.png') }}" alt="plus"  id="show-input-category"/>
         <div class="hidden-category" id="input-category">
             {{ form_label(form.newCategory, 'new_category_name'|trans|raw) }}
             {{ form_widget(form.newCategory, { 'attr': {'class': 'form-control', 'style': 'width:80%;', 'placeholder': 'Введите новые категории через запятую'} }) }}
         </div>
         <br><br>
         <div>
             {{ form_label(form.blogImage, 'upload_file'|trans|raw) }}
             {{ form_widget(form.blogImage) }}
         </div>

         <br>
         <p><strong>{{ 'rating_article'|trans }}</strong> <span class="badge">0</span></p>
         <div>
             <ul id = "rates"
                 data-min-rating = "-5"
                 data-max-rating = "5"
                 data-step = "1"
                 data-transfer-element-selector = "#blog_rating"
                     >
                 <li class="defaultRating" id="prototype-star"></li>
                 <span id="rating">0</span>
             </ul>
         </div>

         <br><br>
         {{ form_widget(form.save, { 'attr': {'class': 'btn btn-success'} }) }}

         <p>{{ form_errors(form.title) }}</p>
         <p>{{ form_errors(form.textBlog) }}</p>
         <p>{{ form_errors(form.blogImage) }}</p>
         <p>{{ form_errors(form) }}</p>

         {{ form_end(form) }}

     {% endblock wraper %}

{% block myjs %}
    <script>
        jQuery(function($){
            $('#show-input-category').on('click', function(){
                $('#input-category').removeClass('hidden-category').addClass('visible-category');
            });

            $('#show-input-tags').on('click', function(){
                $('#input-tags').removeClass('hidden-category').addClass('visible-category');
            });
        });

        jQuery(function($){

            var rateContainer = $("#rates"),
                    minRating = rateContainer.data('min-rating'),
                    maxRating = rateContainer.data('max-rating'),
                    rateStep = rateContainer.data('step'),
                    transferElementSelector = rateContainer.data('transfer-element-selector'),
                    ratingSpan = $('#rating').detach(),
                    prototypeStar = $("#prototype-star").detach().prop("id", ""),

                    memoryStarIndex = 0,
                    rated = false,
                    rateStars = createRatingStars(rateContainer, prototypeStar,minRating, maxRating, rateStep),
                    rating;

            rateContainer.on('mouseover', 'li', function(){

                var indexOfRate = $(this).index();
                ratingSpan.html(this.rating);
                setRatesStars(indexOfRate);

            });

            rateContainer.on('mouseout', 'li', function(){

                if(rated){
                    setRatesStars(memoryStarIndex);
                    ratingSpan.html(rating);
                }
                else{
                    clearRates();
                    ratingSpan.html("");
                }

            });
            rateContainer.on('click', 'li', function(){

                memoryStarIndex = $(this).index();
                rating = this.rating;
                rated = true;
                ratingSpan.html(rating);
                setRatesStars(memoryStarIndex);
                console.log('Your rate is '+rating);
                $(transferElementSelector).prop({"value" : rating });

            });

//region==================== Utils ========================

            function setRatesStars(starIndex){

                var
                        countStars = rateStars.length,
                        rateType = 'defaultRating';

                if(starIndex <= countStars/3){
                    rateType = 'badRating';
                }
                if((starIndex >= countStars/3)&&(starIndex <= countStars*2/3)){
                    rateType = 'rating';
                }
                if((starIndex >= countStars*2/3)&&(starIndex<=countStars)){
                    rateType = 'coolRating';
                }

                for(var i = 0; i < rateStars.length; i++){
                    if(i <= starIndex){
                        rateStars.eq(i).removeClass();
                        rateStars.eq(i).addClass(rateType);
                    }
                    else{
                        rateStars.eq(i).removeClass();
                        rateStars.eq(i).addClass('defaultRating');
                    }
                }
            }
            function clearRates(){
                for(var i = 0; i < rateStars.length; i++){
                    rateStars.eq(i).removeClass();
                    rateStars.eq(i).addClass('defaultRating');
                }
            }
            function createRatingStars(rateContainer, prototypeStar, minRating, maxRating, rateStep){

                var currentNode;

                for(var i = minRating; i <= maxRating; i+=rateStep){

                    currentNode = prototypeStar.clone();
                    currentNode[0].rating = i;
                    // currentNode.param("");
                    rateContainer.append(currentNode);

                }
                rateContainer.append(ratingSpan);
                return rateContainer.find('li');
            }
        });

        //endregion
    </script>
{% endblock %}
